/*
 * C-Ware License
 * 
 * Copyright (c) 2022, C-Ware
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * 3. Redistributions of modified source code must append a copyright notice in
 *    the form of 'Copyright <YEAR> <NAME>' to each modified source file's
 *    copyright notice, and the standalone license file if one exists.
 * 
 * A "redistribution" can be constituted as any version of the source code
 * that is intended to comprise some other derivative work of this code. A
 * fork created for the purpose of contributing to any version of the source
 * does not constitute a truly "derivative work" and does not require listing.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
*/

include(m4array/m4array.m4)

#ifndef CWARE_LIBPATH_OBJECT_PATH
#define CWARE_LIBPATH_OBJECT_PATH

#include "compat.h"

M4ARRAY_DECLARE(LibpathPath, struct LibpathPathComponent);

#define LIBPATH_PATH_VALIDATE(item)                         \
    LIBERROR_IS_NULL(item, "value");                        \
    LIBERROR_IS_NEGATIVE(item->used, "value->used");        \
    LIBERROR_IS_NULL(item->contents, "value->contents");    \
    LIBERROR_IS_NEGATIVE(item->length, "value->length");    \
    LIBERROR_IS_NEGATIVE(item->capacity, "value->capacity")

/* Types of path component */
#define LIBPATH_PATH_TYPE_DRIVE      0
#define LIBPATH_PATH_TYPE_ROOT       1
#define LIBPATH_PATH_TYPE_FILE       2
#define LIBPATH_PATH_TYPE_DIRECTORY  3
#define LIBPATH_PATH_TYPE_EXTENSION  4

/*
 * @docgen_start
 * @type: function
 * @name: libpath_path_init
 * @brief: initialize a new path array
 *
 * @include: libpath.h
 *
 * @description
 * @Initializes a new path array, which will be used to compile a system
 * @dependent path.
 * @description
 *
 * @return_value
 * @An array of path components
 * @return_value
 *
 * @type: struct LibpathPath
 *
 * @reference: libpath(cware)
 * @reference: cware(cware)
 * 
 * @docgen_end
*/
struct LibpathPath *libpath_path_init();

/*
 * @docgen_start
 * @type: function
 * @name: libpath_path_free
 * @brief: release a path array
 *
 * @include: libpath.h
 *
 * @description
 * @Releases a path array from memory.
 * @description
 *
 * @fparam: path
 * @type: struct LibpathPath *
 * @brief: the path to release from memory
 *
 * @reference: libpath(cware)
 * @reference: cware(cware)
 *
 * @docgen_end
*/
#if defined(CWUTILS_ANCIENT)
void libpath_path_free();
#else
void libpath_path_free(struct LibpathPath *path);
#endif

/*
 * @docgen_start
 * @type: function
 * @name: libpath_path_add_root
 * @brief: add a path root component to the path
 *
 * @include: libpath.h
 *
 * @description
 * @This function will add a "root" path object to the path array.
 * @On UNIX-like systems, it will evaluate to \B/\B, on DOS, NT, and OS/2,
 * @it will evaluate to \B\\\\\B, and on VMS it will evaluate to \B[000000]\B.
 * @description
 *
 * @notes
 * @This, among a couple other path components, can only appear ONCE in a
 * @path array.
 * @notes
 *
 * @fparam: path
 * @type: struct LibpathPath *
 * @brief: the path array to add the root to
 *
 * @reference: libpath(cware)
 * @reference: cware(cware)
 *
 * @docgen_end
*/
#if defined(CWUTILS_ANCIENT)
void libpath_path_add_root();
#else
void libpath_path_add_root(struct LibpathPath *path);
#endif

/*
 * @docgen_start
 * @type: function
 * @name: libpath_path_add_drive
 * @brief: add a drive to the path
 *
 * @include: libpath.h
 *
 * @description
 * @This function will add a drive to the path.
 * @description
 *
 * @notes
 * @This, among a couple other path components, can only appear ONCE in a
 * @path array.
 * @notes
 *
 * @fparam: path
 * @type: struct Libpath *
 * @brief: the path array to add the drive to
 *
 * @fparam: name
 * @type: const char *
 * @brief: the name of the drive
 *
 * @reference: libpath(cware)
 * @reference: cware(cware)
 *
 * @docgen_end
*/
#if defined(CWUTILS_ANCIENT)
void libpath_path_add_drive();
#else
void libpath_path_add_drive(struct LibpathPath *path, CWUTILS_CONST char *name);
#endif

/*
 * @docgen_start
 * @type: function
 * @name: libpath_path_add_file
 * @brief: add a file to the path
 *
 * @include: libpath.h
 *
 * @description
 * @This function will add a file name to the path. This function does not
 * @add an extension, so if you do foo.txt, the .txt will be apart of the
 * @file name, rather than the extension.
 * @
 * @Some operating systems have limits on directory name lengths, so if the
 * @target OS does not support a length of directory name you gave it, it will
 * @throw an error.
 * @description
 *
 * @notes
 * @This, among a couple other path components, can only appear ONCE in a
 * @path array. Unlike others, though, it is optional, and if it does
 * @exist, it must beat the end of the array.
 * @notes
 *
 * @fparam: path
 * @type: struct Libpath *
 * @brief: the path array to add the file to
 *
 * @fparam: name
 * @type: const char *
 * @brief: the name of the file
 *
 * @reference: libpath(cware)
 * @reference: cware(cware)
 *
 * @docgen_end
*/
#if defined(CWUTILS_ANCIENT)
void libpath_path_add_file();
#else
void libpath_path_add_file(struct LibpathPath *path, CWUTILS_CONST char *name);
#endif

/*
 * @docgen_start
 * @type: function
 * @name: libpath_path_add_directory
 * @brief: add a directory to the path
 *
 * @include: libpath.h
 *
 * @description
 * @This function will a directory to the path array. Some operating systems
 * @have limits on directory name lengths, so if the target OS does not
 * @support a length of directory name you gave it, it will throw an error.
 * @description
 *
 * @notes
 * @This, among a couple other path components, can only appear ONCE in a
 * @path array. Unlike others, though, it is optional, and if it does
 * @exist, it must beat the end of the array.
 * @notes
 *
 * @fparam: path
 * @type: struct Libpath *
 * @brief: the path array to add the file to
 *
 * @fparam: name
 * @type: const char *
 * @brief: the name of the file
 *
 * @reference: libpath(cware)
 * @reference: cware(cware)
 *
 * @docgen_end
*/
#if defined(CWUTILS_ANCIENT)
void libpath_path_add_directory();
#else
void libpath_path_add_directory(struct LibpathPath *path, CWUTILS_CONST char *name);
#endif

/*
 * @docgen_start
 * @type: function
 * @name: libpath_path_add_extension
 * @brief: add a file extension to the path
 *
 * @include: libpath.h
 *
 * @description
 * @This function will a add a file extension to the target path. Some operating
 * @systems have limits on file extension name lengths, so if the target OS does
 * @not support extension names of the length you provide, an error will be
 * @thrown.
 * @description
 *
 * @notes
 * @This, among a couple other path components, can only appear ONCE in a
 * @path array. It is optional, although some operating systems like VMS
 * @require a file extension (or at least, an EMPTY file extension).
 * @
 * @When this appears in the path array, it must appear directly AFTER a
 * @file. Anything else is erroneous.
 * @notes
 *
 * @fparam: path
 * @type: struct Libpath *
 * @brief: the path array to add the file to
 *
 * @fparam: name
 * @type: const char *
 * @brief: the name of the file
 *
 * @reference: libpath(cware)
 * @reference: cware(cware)
 *
 * @docgen_end
*/
#if defined(CWUTILS_ANCIENT)
void libpath_path_add_extension();
#else
void libpath_path_add_extension(struct LibpathPath *path, CWUTILS_CONST char *name);
#endif

#endif
